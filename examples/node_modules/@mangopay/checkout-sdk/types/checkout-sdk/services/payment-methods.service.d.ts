import {
  CreateCardPayment,
  CreateCardRegistration,
  CreatePaypalPayment,
  PaymentMethod,
  PaymentMethodType,
  ValidateApplePayMerchant,
} from '@mangopay/checkout-sdk-elements-core';
import { AuthorizeApplePayResult, AuthorizePaymentInput } from '@mangopay/sdk-authorize';
interface StoredCallbacks {
  onCreateCardRegistration: CreateCardRegistration;
  onCreateCardPayment: CreateCardPayment;
  onValidateApplePayMerchant: ValidateApplePayMerchant;
  onCreatePaypalPayment: CreatePaypalPayment;
}
export declare class PaymentMethodsService {
  private readonly paymentMethods;
  private storedCallbacks;
  getPaymentMethods(): PaymentMethod<PaymentMethodType>[];
  constructor(paymentMethods?: PaymentMethod[]);
  private getPaymentMethodOptions;
  private getApplePayRequest;
  getCallbackFn(
    fnName: keyof StoredCallbacks
  ):
    | ((
        input: import('@mangopay/checkout-sdk-elements-core').ValidateApplePayMerchantInput
      ) => Promise<import('@mangopay/checkout-sdk-elements-core').ApplePayMerchantSession>)
    | ((
        cardType?: string | undefined
      ) => Promise<import('@mangopay/checkout-sdk-elements-core').CreateCardRegistrationResult>)
    | ((data?: any) => Promise<import('@mangopay/sdk-authorize').CreateCardDirectPayInResult>)
    | ((
        profilingAttemptReference?: string | undefined
      ) => Promise<import('@mangopay/checkout-sdk-elements-core').CreatePaypalPaymentResult>)
    | undefined;
  authorizeApplePayPaymentRequest(authorizeRequestInput: AuthorizePaymentInput): Promise<AuthorizeApplePayResult>;
  private getSupportedPaymentMethods;
}
export {};
