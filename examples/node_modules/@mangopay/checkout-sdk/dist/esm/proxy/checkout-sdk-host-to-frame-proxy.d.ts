import { CheckHasAuthorizeErrorToHandleResult } from '@mangopay/checkout-sdk-core';
import { CheckoutSdkOptions, CheckoutSdkType } from '@mangopay/checkout-sdk-elements-core';
import { CheckoutSdkHostEventMap, CheckoutSdkProxy, CheckoutSdkFrameEventMap, CheckoutSdkProxyMessagesOf, HandleSecureAuthenticationResult } from '@mangopay/checkout-sdk-hosted-core';
import { CheckoutSdkHostToFrameProxyEventMap } from './checkout-sdk-host-to-frame-proxy-event-map';
import { CheckoutSdkInstance } from '../checkout-sdk-instance';
import { AuthorizePaymentInput, AuthorizeApplePayResult } from '@mangopay/sdk-authorize';
export declare class CheckoutSdkHostToFrameProxy extends CheckoutSdkProxy<CheckoutSdkHostEventMap, CheckoutSdkFrameEventMap> implements CheckoutSdkInstance {
    static readonly version: string;
    private element;
    private frameElement;
    private _isDisabled;
    private _isComplete;
    private isMounted;
    private options;
    private hostedCheckoutSdkUrl;
    private origin;
    private sdkType;
    private checkoutSdkSubscriptions;
    private unsubscribeCallbacks;
    private childWindow;
    private readonly onCreateCardRegistration;
    private readonly onCreateCardPayment;
    private readonly onValidateApplePayMerchant;
    private readonly onCreatePaypalPayment;
    private readonly promiseResolvers;
    get isComplete(): boolean;
    get isDisabled(): boolean;
    constructor(options: CheckoutSdkOptions, hostedCheckoutSdkUrl: string, origin: string, sdkType: CheckoutSdkType);
    mount(elementOrSelector: HTMLElement | string): void;
    umount(): void;
    on<T extends keyof CheckoutSdkHostToFrameProxyEventMap>(type: T, callback: (event: CheckoutSdkHostToFrameProxyEventMap[T]) => void): () => void;
    disable(): void;
    enable(): void;
    handleSecureAuthentication(data: CheckHasAuthorizeErrorToHandleResult): Promise<HandleSecureAuthenticationResult>;
    completePayment(): void;
    authorizeApplePayPaymentRequest(authorizeRequestInput: AuthorizePaymentInput): Promise<AuthorizeApplePayResult>;
    setErrorMessage(errorMessage?: string): void;
    setLoading(loading: boolean): void;
    protected onTargetMessage(message: CheckoutSdkProxyMessagesOf<CheckoutSdkFrameEventMap>): void;
    private dispatchInitialize;
    private onFrameLoad;
    private onInitialized;
    private onError;
    private onChange;
    private onPaymentComplete;
    private onTokenizationComplete;
    private onHandleSecureAuthentication;
    private onResize;
    private onDocumentClick;
    private onOpenHostAuthPopup;
    private onApplePayPaymentRequest;
    private onAuthorizeApplePayComplete;
    private onPaymentMethodSelect;
    private onHostAuthComplete;
    private onCreateCardRegistrationComplete;
    private handleCreateCardRegistration;
    private onCreatePaypalPaymentComplete;
    private handleCreatePaypalPayment;
    private hidePopupOverlay;
    private onPopupOverlayClick;
    private onPopupOverlayCloseClick;
    private showPopupOverlay;
    private handleCreateCardPayment;
    private onCreateCardPaymentComplete;
    private dispatchSdkEvent;
    private getSupportedPaymentMethods;
    private getPaymentMethodOptions;
    private getApplePayRequest;
}
